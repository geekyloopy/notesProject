{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Json",
    "description": "This is a generated swagger json for your sails project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Notes",
      "description": "Sails blueprint actions for the **Notes** model"
    },
    {
      "name": "Users",
      "description": "Sails blueprint actions for the **Users** model"
    }
  ],
  "components": {
    "schemas": {
      "notes": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/notes-without-required-constraint"
          },
          {
            "required": [
              "uname"
            ]
          }
        ]
      },
      "notes-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Notes**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "uname": {
            "type": "string",
            "uniqueItems": true
          },
          "notesList": {}
        }
      },
      "users": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/users-without-required-constraint"
          },
          {
            "required": [
              "uname",
              "password"
            ]
          }
        ]
      },
      "users-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Users**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "uname": {
            "type": "string",
            "uniqueItems": true
          },
          "password": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-notes": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Notes** record's primary key value"
      },
      "ModelPKParam-users": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Users** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/register": {
      "post": {
        "summary": "/register",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/list": {
      "get": {
        "summary": "/list",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "/login",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/listAllNotes": {
      "post": {
        "summary": "/listAllNotes",
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/editANote": {
      "put": {
        "summary": "/editANote",
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/updatePassword": {
      "put": {
        "summary": "/updatePassword",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/deleteAllNotes": {
      "delete": {
        "summary": "/deleteAllNotes",
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/deleteANote": {
      "put": {
        "summary": "/deleteANote",
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/addANote": {
      "put": {
        "summary": "/addANote",
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/getPassword": {
      "get": {
        "summary": "/getPassword",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/listByUser/{uname}": {
      "post": {
        "summary": "/listByUser/{uname}",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uname",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `uname`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes/find": {
      "get": {
        "summary": "List Notes (find where) *",
        "description": "Find a list of **Notes** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notes** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notes"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes/find/{_id}": {
      "get": {
        "summary": "Get Notes (find one) *",
        "description": "Look up the **Notes** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notes** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes/create": {
      "get": {
        "summary": "Create Notes *",
        "description": "Create a new **Notes** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "uname",
            "schema": {
              "type": "string",
              "uniqueItems": true
            },
            "required": true
          },
          {
            "in": "query",
            "name": "notesList",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notes** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes/update/{_id}": {
      "get": {
        "summary": "Update Notes *",
        "description": "Update an existing **Notes** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "uname",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "notesList",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notes** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes/destroy/{_id}": {
      "get": {
        "summary": "Delete Notes (destroy) *",
        "description": "Delete the **Notes** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notes** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/find": {
      "get": {
        "summary": "List Users (find where) *",
        "description": "Find a list of **Users** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Users** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/users"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/find/{_id}": {
      "get": {
        "summary": "Get Users (find one) *",
        "description": "Look up the **Users** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Users** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/create": {
      "get": {
        "summary": "Create Users *",
        "description": "Create a new **Users** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "uname",
            "schema": {
              "type": "string",
              "uniqueItems": true
            },
            "required": true
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Users** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/update/{_id}": {
      "get": {
        "summary": "Update Users *",
        "description": "Update an existing **Users** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "uname",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Users** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/destroy/{_id}": {
      "get": {
        "summary": "Delete Users (destroy) *",
        "description": "Delete the **Users** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Users** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notes": {
      "get": {
        "summary": "List Notes (find where)",
        "description": "Find a list of **Notes** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notes** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notes"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Notes",
        "description": "Create a new **Notes** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notes** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notes instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notes"
              }
            }
          }
        }
      }
    },
    "/notes/{_id}": {
      "get": {
        "summary": "Get Notes (find one)",
        "description": "Look up the **Notes** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,notesList"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notes** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Notes",
        "description": "Update an existing **Notes** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notes** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notes instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notes-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Notes (destroy)",
        "description": "Delete the **Notes** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notes"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notes** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notes"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notes** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List Users (find where)",
        "description": "Find a list of **Users** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Users** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/users"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Users",
        "description": "Create a new **Users** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Users** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Users instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users"
              }
            }
          }
        }
      }
    },
    "/users/{_id}": {
      "get": {
        "summary": "Get Users (find one)",
        "description": "Look up the **Users** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,uname,password"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Users** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Users",
        "description": "Update an existing **Users** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Users** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Users instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Users (destroy)",
        "description": "Delete the **Users** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-users"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Users** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Users** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}